{"ast":null,"code":"var _jsxFileName = \"D:\\\\FoodyChat\\\\foodychat_frontend\\\\src\\\\components\\\\ChatbotPage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatbotPage() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [chatReady, setChatReady] = useState(false);\n  const [error, setError] = useState('');\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    const prepareRAG = async () => {\n      try {\n        // 1. 세션에서 유저 정보 확인\n        const sessionRes = await axios.get(\"http://localhost:8080/ses\", {\n          withCredentials: true\n        });\n        const userData = sessionRes.data;\n        setUser(userData);\n\n        // 2. RAG 생성 준비 요청\n        if (userData) {\n          // 유저 데이터가 유효할 때만 RAG 요청\n          const ragRes = await axios.post(\"http://localhost:8000/chat/chat\", {\n            user_id: userData.user_id\n          }, {\n            withCredentials: true\n          });\n          console.log('RAG 생성 결과:', ragRes.data);\n          setChatReady(true);\n        }\n      } catch (err) {\n        console.error(err);\n        setError('챗봇 준비 중 오류 발생');\n      } finally {\n        setLoading(false);\n      }\n    };\n    prepareRAG();\n  }, []); // 이 부분은 세션을 초기 로딩 시 한 번만 호출합니다.\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uCC57\\uBD07 \\uC900\\uBE44 \\uC911\\uC785\\uB2C8\\uB2E4...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83E\\uDDE0 \\uCC57\\uBD07\\uACFC \\uB300\\uD654\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), chatReady ? /*#__PURE__*/_jsxDEV(ChatInterface, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uCC57\\uBD07\\uC744 \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n// 실제 챗 인터페이스 (단순화)\n_s(ChatbotPage, \"rQpxSWgSTeC4EECJFi24XTeIHiE=\");\n_c = ChatbotPage;\nfunction ChatInterface({\n  user\n}) {\n  _s2();\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n  const sendMessage = async () => {\n    if (!message) return;\n    const res = await axios.post(\"http://localhost:8000/chat/chat\", {\n      user_id: user.user_id,\n      question: message\n    }, {\n      withCredentials: true\n    });\n    setChat([...chat, {\n      question: message,\n      answer: res.data.answer\n    }]);\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: chat.map((item, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uD83D\\uDC64:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), \" \", item.question, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 49\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uD83E\\uDD16:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), \" \", item.answer]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"\\uBCF4\\uB0B4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s2(ChatInterface, \"+uaI6MFTr11lxLnYd50z3kcTqJk=\");\n_c2 = ChatInterface;\nexport default ChatbotPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatbotPage\");\n$RefreshReg$(_c2, \"ChatInterface\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","ChatbotPage","_s","loading","setLoading","chatReady","setChatReady","error","setError","user","setUser","prepareRAG","sessionRes","get","withCredentials","userData","data","ragRes","post","user_id","console","log","err","children","fileName","_jsxFileName","lineNumber","columnNumber","className","ChatInterface","_c","_s2","message","setMessage","chat","setChat","sendMessage","res","question","answer","map","item","idx","value","onChange","e","target","placeholder","onClick","_c2","$RefreshReg$"],"sources":["D:/FoodyChat/foodychat_frontend/src/components/ChatbotPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction ChatbotPage() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [chatReady, setChatReady] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const prepareRAG = async () => {\r\n      try {\r\n        // 1. 세션에서 유저 정보 확인\r\n        const sessionRes = await axios.get(\"http://localhost:8080/ses\", { withCredentials: true })\r\n        const userData = sessionRes.data;\r\n        setUser(userData);\r\n\r\n        // 2. RAG 생성 준비 요청\r\n        if (userData) { // 유저 데이터가 유효할 때만 RAG 요청\r\n          const ragRes = await axios.post(\r\n            \"http://localhost:8000/chat/chat\",\r\n            { user_id: userData.user_id },\r\n            { withCredentials: true }\r\n          );\r\n\r\n          console.log('RAG 생성 결과:', ragRes.data);\r\n          setChatReady(true);\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n        setError('챗봇 준비 중 오류 발생');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    prepareRAG();\r\n  }, []); // 이 부분은 세션을 초기 로딩 시 한 번만 호출합니다.\r\n\r\n  if (loading) return <div>챗봇 준비 중입니다...</div>;\r\n  if (error) return <div>{error}</div>;\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <h2>🧠 챗봇과 대화하기</h2>\r\n      {chatReady ? (\r\n        <ChatInterface user={user} />\r\n      ) : (\r\n        <div>챗봇을 사용할 수 없습니다.</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// 실제 챗 인터페이스 (단순화)\r\nfunction ChatInterface({ user }) {\r\n  const [message, setMessage] = useState('');\r\n  const [chat, setChat] = useState([]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!message) return;\r\n\r\n    const res = await axios.post(\r\n      \"http://localhost:8000/chat/chat\",\r\n      {\r\n        user_id: user.user_id,\r\n        question: message\r\n      },\r\n      { withCredentials: true }\r\n    );\r\n    setChat([...chat, { question: message, answer: res.data.answer }]);\r\n    setMessage('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {chat.map((item, idx) => (\r\n          <div key={idx}>\r\n            <strong>👤:</strong> {item.question}<br />\r\n            <strong>🤖:</strong> {item.answer}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        placeholder=\"메시지를 입력하세요...\"\r\n      />\r\n      <button onClick={sendMessage}>보내기</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatbotPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}