<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.foodychat.user.dao.UserDAO">
	<!-- 사용자 조회(아이디) -->
	<select id="selectUserById" parameterType="long" resultType="com.foodychat.user.vo.UserVO">
		SELECT	um.user_id,
				um.email,
				IFNULL(um.google_id,'') AS google_id,
				IFNULL(um.user_password,'') AS google_id,
				um.user_name,
				um.phone,
				um.membership_level as membership_lvl,
				um.reg_date,
				um.upd_date,
				CASE IFNULL(ud.gender,'1') WHEN '2' THEN '여' ELSE '남' END as gender,
				ud.age,
				ud.user_weight,
				ud.height,
				ud.user_address,
				um.user_password
		FROM	users um LEFT OUTER JOIN user_details ud ON um.user_id = ud.user_id
		WHERE	um.user_id = #{id}
	</select>
	<!-- 사용자 조회(이메일) -->
	<select id="selectUserByEmail" parameterType="string" resultType="com.foodychat.user.vo.UserVO">
		SELECT	um.user_id,
				um.email,
				IFNULL(um.google_id,'') AS google_id,
				IFNULL(um.user_password,'') AS google_id,
				um.user_name,
				um.phone,
				um.membership_level as membership_lvl,
				um.reg_date,
				um.upd_date,
				CASE IFNULL(ud.gender,'1') WHEN '2' THEN '여' ELSE '남' END as gender,
				ud.age,
				ud.user_weight,
				ud.height,
				IFNULL(ud.user_address,'') AS user_address,
				um.user_password
		FROM	users um LEFT OUTER JOIN user_details ud ON um.user_id = ud.user_id
		WHERE	um.email = #{email}
	</select>
	<!-- 사용자 비밀번호 수정 -->
	<update id="updatePasswordUser" parameterType="com.foodychat.user.vo.UserVO">
		UPDATE	users
		SET		user_password = #{user_password}
		WHERE 	user_id = #{user_id}
	</update>
	<!-- 사용자 사용 로그등록 -->
	<insert id="insertUserLog" parameterType="com.foodychat.user.vo.UserLogVO">
		INSERT INTO	user_logs(user_id, login_time, logout_time, ip_address, user_agent, login_status, failure_reason)
		VALUES(#{userId},#{loginTime},#{logoutTime},#{ipAddress},#{userAgent},#{loginStatus},#{failureReason});
	</insert>
	<!--  마지막로그인 정보 확인 -->
	<select id="selectLastSuccessfulLogByUserId" parameterType="long" resultType="com.foodychat.user.vo.UserLogVO">
		SELECT	* 
		FROM	user_logs
	    WHERE	user_id = #{user_id}
	      AND	login_status = '1'
	    ORDER BY login_time DESC
	    LIMIT 1
	</select>
	<!-- 로그아웃시간 수정 -->
	<update id="updateLogoutTime" parameterType="com.foodychat.user.vo.UserLogVO">
		UPDATE	user_logs
		SET		logout_time = #{logoutTime}
		WHERE 	id = #{id}
	</update>
	<!-- 회원정보 수정 -->
	<update id="updateUser" parameterType="com.foodychat.user.vo.UserVO">
		UPDATE	users
		SET		user_name = #{user_name},
				phone = #{phone},
				upd_id = #{login_id},
				upd_ip = #{login_ip},
				upd_date = NOW()
		WHERE 	user_id = #{user_id}
	</update>
	<!-- 회원상세정보 수정 -->
	<update id="updateUserDetail" parameterType="com.foodychat.user.vo.UserVO">
		UPDATE	user_details
		SET		gender = #{gender},
				age = #{age},
				user_weight = #{user_weight},
				height = #{height},
				user_address = #{user_address},
				upd_id = #{login_id},
				upd_ip = #{login_ip},
				upd_date = NOW()
		WHERE 	user_id = #{user_id}
	</update>
	<!--  마지막로그인 정보 확인 -->
	<select id="getUserDetailById" parameterType="long" resultType="com.foodychat.user.vo.UserVO">
		SELECT	*
		FROM	user_details
	    WHERE	user_id = #{user_id}
	    LIMIT 1
	</select>
	<!-- 회원상세정보 수정 -->
	<insert id="insertUserDetail" parameterType="com.foodychat.user.vo.UserVO">
		INSERT INTO	user_details(user_id, gender, age, user_weight, height, user_address, reg_id, reg_ip)
		VALUES(#{user_id},#{gender},#{age},#{user_weight},#{height},#{user_address},#{login_id},#{login_ip})
	</insert>
	<!--  마지막로그인 정보 확인 -->
	<select id="selectIdByNameAndPhone" parameterType="java.util.Map" resultType="string">
		SELECT	email
		FROM	users
	    WHERE	user_name = #{user_name}
	    	AND	phone like CONCAT('%',#{phone},'%')
	    LIMIT 1
	</select>
	<!--  비밀번호 변경 -->
	<update id="updateUserPasswordByEmail" parameterType="java.util.Map">
		UPDATE	users
		SET		user_password = #{password}
		WHERE	email = #{email}
	</update>
</mapper>