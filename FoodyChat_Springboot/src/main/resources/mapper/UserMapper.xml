<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.foodychat.user.dao.UserDAO">

    <!-- 회원가입 (users 테이블 insert) -->
    <insert id="insertUser" parameterType="com.foodychat.user.vo.UserVO">
        INSERT INTO users (
            email, google_id, user_password, user_name, phone, membership_level,
            reg_ip, reg_date
        ) VALUES (
            #{email}, #{google_id}, #{user_password}, #{user_name}, #{phone}, 'regular',
            #{login_ip}, NOW()
        )
    </insert>

    <!-- 회원가입 (user_details 테이블 insert) -->
    <insert id="insertUserDetails" parameterType="com.foodychat.user.vo.UserDetailsVO">
        INSERT INTO user_details (user_id, gender, age, user_weight, height, user_address, health_goal)
        VALUES (#{user_id}, #{gender}, #{age}, #{user_weight}, #{height}, #{user_address}, #{health_goal})
    </insert>

    <!-- 이메일 중복 확인 -->
    <select id="checkEmailExists" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM users WHERE email = #{email}
    </select>

    <!-- 이메일로 사용자 조회 -->
    <select id="findByEmail" parameterType="string" resultType="UserVO">
        SELECT um.user_id,
               um.email,
               IFNULL(um.google_id,'') AS google_id,
               IFNULL(um.user_password,'') AS user_password,
               um.user_name,
               um.phone,
               um.membership_level AS membership_level,
               um.reg_date,
               um.upd_date,
               CAST(IFNULL(ud.gender,1) AS CHAR) AS gender,
               ud.age,
               ud.user_weight,
               ud.height,
               IFNULL(ud.user_address,'') AS user_address,
               cm.detail_name as health_goal
        FROM users um
        LEFT OUTER JOIN user_details ud ON um.user_id = ud.user_id
        LEFT OUTER JOIN common_code_details cm ON cm.code_id = 'CM003' and cm.detail_code = ud.health_goal
        WHERE um.email = #{email}
    </select>

    <!-- 구글 ID로 사용자 조회 -->
    <select id="findByGoogleId" parameterType="String" resultType="com.foodychat.user.vo.UserVO">
        SELECT u.*, ud.age, ud.user_weight, ud.height, ud.user_address
        FROM users u
        LEFT JOIN user_details ud ON u.user_id = ud.user_id
        WHERE u.google_id = #{googleId}
    </select>

    <!-- 구글 로그인 시 신규 등록 -->
    <insert id="insertGoogleUser" parameterType="UserVO" useGeneratedKeys="true" keyProperty="user_id">
        INSERT INTO users (email, google_id, user_name, phone, membership_level)
        VALUES (#{email}, #{google_id}, #{user_name}, #{phone}, 'regular');
    </insert>

    <!-- 로그인 정보 업데이트 -->
    <update id="updateLoginInfo">
        UPDATE users
        SET login_id = #{login_id}, login_ip = #{login_ip}
        WHERE user_id = #{user_id}
    </update>

    <!-- 사용자 ID로 조회 -->
    <select id="findByUserId" parameterType="long" resultType="com.foodychat.user.vo.UserVO">
        SELECT *
        FROM users u
        JOIN user_details ud ON u.user_id = ud.user_id
        WHERE u.user_id = #{user_id}
    </select>

    <!-- 유저 목록 조회 + 페이지네이션 -->
    <select id="getUserList" resultType="UserVO">
        SELECT user_id, email, membership_level, reg_date
        FROM users
        ORDER BY reg_date DESC
        <!-- LIMIT #{limit} OFFSET #{offset} -->
    </select>

    <!-- 유저 전체 숫자 -->
    <select id="getTotalUserCount" resultType="int">
        SELECT COUNT(*) FROM users
    </select>

    <!-- 유저 삭제 -->
    <delete id="deleteUser" parameterType="long">
        DELETE FROM users WHERE user_id = #{userId}
    </delete>

    <!-- 유저 등급 조정 -->
    <update id="updateMembershipLevel">
        UPDATE users
        SET membership_level = #{level}
        WHERE user_id = #{userId}
    </update>

    <!-- 사용자 조회(아이디) -->
    <select id="selectUserById" parameterType="long" resultType="com.foodychat.user.vo.UserVO">
        SELECT um.user_id,
               um.email,
               IFNULL(um.google_id,'') AS google_id,
               IFNULL(um.user_password,'') AS user_password,
               um.user_name,
               um.phone,
               um.membership_level AS membership_level,
               um.reg_date,
               um.upd_date,
               CAST(IFNULL(ud.gender,1) AS CHAR) AS gender,
               ud.age,
               ud.user_weight,
               ud.height,
               ud.user_address,
               cm.detail_name as health_goal
        FROM users um
        LEFT OUTER JOIN user_details ud ON um.user_id = ud.user_id
        LEFT OUTER JOIN common_code_details cm ON cm.code_id = 'CM003' and cm.detail_code = ud.health_goal
        WHERE um.user_id = #{id}
    </select>

    <!-- 사용자 조회(이메일) -->
    <select id="selectUserByEmail" parameterType="string" resultType="com.foodychat.user.vo.UserVO">
        SELECT um.user_id,
               um.email,
               IFNULL(um.google_id,'') AS google_id,
               IFNULL(um.user_password,'') AS user_password,
               um.user_name,
               um.phone,
               um.membership_level AS membership_level,
               um.reg_date,
               um.upd_date,
               CAST(IFNULL(ud.gender,1) AS CHAR) AS gender,
               ud.age,
               ud.user_weight,
               ud.height,
               IFNULL(ud.user_address,'') AS user_address,
               cm.detail_name as health_goal
        FROM users um
        LEFT OUTER JOIN user_details ud ON um.user_id = ud.user_id
        LEFT OUTER JOIN common_code_details cm ON cm.code_id = 'CM003' and cm.detail_code = ud.health_goal
        WHERE um.email = #{email}
    </select>

    <!-- 사용자 비밀번호 수정 -->
    <update id="updatePasswordUser" parameterType="com.foodychat.user.vo.UserVO">
        UPDATE users
        SET user_password = #{user_password}
        WHERE user_id = #{user_id}
    </update>

    <!-- 사용자 사용 로그 등록 -->
    <insert id="insertUserLog" parameterType="com.foodychat.user.vo.UserLogVO">
        INSERT INTO user_logs(user_id, login_time, logout_time, ip_address, user_agent, login_status, failure_reason)
        VALUES(#{userId}, #{loginTime}, #{logoutTime}, #{ipAddress}, #{userAgent}, #{loginStatus}, #{failureReason})
    </insert>

    <!-- 마지막 로그인 정보 확인 -->
    <select id="selectLastSuccessfulLogByUserId" parameterType="long" resultType="com.foodychat.user.vo.UserLogVO">
        SELECT *
        FROM user_logs
        WHERE user_id = #{user_id}
          AND login_status = '1'
        ORDER BY login_time DESC
        LIMIT 1
    </select>

    <!-- 로그아웃 시간 수정 -->
    <update id="updateLogoutTime" parameterType="com.foodychat.user.vo.UserLogVO">
        UPDATE user_logs
        SET logout_time = #{logoutTime}
        WHERE id = #{id}
    </update>

    <!-- 회원 정보 수정 -->
    <update id="updateUser" parameterType="com.foodychat.user.vo.UserVO">
        UPDATE users
        SET user_name = #{user_name},
            phone = #{phone},
            upd_id = #{login_id},
            upd_ip = #{login_ip},
            upd_date = NOW()
        WHERE user_id = #{user_id}
    </update>

    <!-- 회원 상세 정보 수정 -->
    <update id="updateUserDetail" parameterType="com.foodychat.user.vo.UserVO">
        UPDATE user_details
        SET gender = #{gender},
            age = #{age},
            user_weight = #{user_weight},
            height = #{height},
            user_address = #{user_address},
            upd_id = #{login_id},
            upd_ip = #{login_ip},
            upd_date = NOW()
        WHERE user_id = #{user_id}
    </update>

    <!-- 회원 상세 정보 조회 -->
    <select id="getUserDetailById" parameterType="long" resultType="com.foodychat.user.vo.UserVO">
        SELECT *
        FROM user_details
        WHERE user_id = #{user_id}
        LIMIT 1
    </select>

    <!-- 회원 상세 정보 신규 입력 -->
    <insert id="insertUserDetail" parameterType="com.foodychat.user.vo.UserVO">
        INSERT INTO user_details(user_id, gender, age, user_weight, height, user_address, reg_id, reg_ip)
        VALUES(#{user_id}, #{gender}, #{age}, #{user_weight}, #{height}, #{user_address}, #{login_id}, #{login_ip})
    </insert>

    <!-- 이름 + 전화번호로 이메일 조회 -->
    <select id="selectIdByNameAndPhone" parameterType="java.util.Map" resultType="string">
        SELECT email
        FROM users
        WHERE user_name = #{user_name}
          AND phone LIKE CONCAT('%', #{phone}, '%')
        LIMIT 1
    </select>

    <!-- 비밀번호 변경 (이메일 기반) -->
    <update id="updateUserPasswordByEmail" parameterType="java.util.Map">
        UPDATE users
        SET user_password = #{password}
        WHERE email = #{email}
    </update>

	<!-- 식단정보 조회 -->
	<select id="selectMeals" parameterType="long" resultType="com.foodychat.user.vo.UserMealsVO">
	    SELECT 
            u.user_id,
	        u.email,
	        u.google_id,
	        u.user_name,
	        m.meal_date,
	        m.meal_type,
	        CASE m.meal_type
	            WHEN '1' THEN '조식'
	            WHEN '2' THEN '중식'
	            WHEN '3' THEN '석식'
	            ELSE '기타'
	        END AS meal_type_nm,
	        m.meal_text,
	        u.membership_level as membership_lvl
        FROM user_meals m LEFT OUTER JOIN users u ON u.user_id = m.user_id
        WHERE 1=1
            AND m.user_id = #{user_id}
        ORDER BY m.meal_date ASC
	</select>
	<!-- 이메일 중복 체크 -->
	<select id="isEmailExists" resultType="int" parameterType="string">
	  SELECT COUNT(*) FROM users WHERE email = #{email}
	</select>

    <!-- 사용자 조회(유저 고유 int 아이디) -->
    <select id="selectUserByUserId" parameterType="int" resultType="com.foodychat.user.vo.UserVO">
        SELECT um.user_id,
           um.email,
           IFNULL(um.google_id,'') AS google_id,
           IFNULL(um.user_password,'') AS user_password,
           um.user_name,
           um.phone,
           um.membership_level AS membership_level,
           um.reg_date,
           um.upd_date,
           IFNULL(ud.gender,1) AS gender,
           ud.age,
           ud.user_weight,
           ud.height,
           IFNULL(ud.user_address,'') AS user_address,
           cm.detail_name AS health_goal
        FROM users um
        LEFT OUTER JOIN user_details ud ON um.user_id = ud.user_id
        LEFT OUTER JOIN common_code_details cm ON cm.code_id = 'CM003' AND cm.detail_code = ud.health_goal
        WHERE um.user_id = #{userId}
    </select>

    <!-- BMI 기록 리스트 조회 -->
    <select id="selectBmiHistoryByUserId" parameterType="long" resultType="com.foodychat.user.vo.BmiHistoryVO">
        SELECT id, user_id, bmi_score, gender, user_weight, height, reg_date, upd_date
        FROM bmi_history
        WHERE user_id = #{userId}
        ORDER BY reg_date DESC
    </select>

    <!-- 음식 인식 기록 리스트 조회 -->
    <select id="selectFoodHistoryByUserId" parameterType="long" resultType="com.foodychat.user.vo.FoodRecognitionHistoryVO">
        SELECT id, user_id, food_id, rec_date, meal_type, image_path, reg_date, upd_date
        FROM food_recognition_history
        WHERE user_id = #{userId}
        ORDER BY reg_date DESC
    </select>
    
    <select id="getUserLogList" parameterType="java.util.Map" resultType="com.foodychat.user.vo.UserLogVO">
        SELECT 	l.id,
        		l.user_id as userId,
				u.email,
				l.ip_address AS ipAddress,
				IFNULL(l.login_time,'') AS loginTime,
				IFNULL(l.logout_time,'') AS logoutTime,
				l.login_status as loginStatus,
				IFNULL(l.failure_reason,'') AS failureReason,
				l.reg_date as regDate
		FROM	user_logs l LEFT OUTER JOIN users u ON u.user_id = l.user_id
		WHERE 1=1
	    <if test="email != null and email != ''">
	        AND u.email LIKE CONCAT('%', #{email}, '%')
	    </if>
	    <if test="status != null and status != ''">
	        AND l.login_status = #{status}
	    </if>
	    <if test="startDate != null">
	        AND DATE(l.reg_date) &gt;= #{startDate}
	    </if>
	    <if test="endDate != null">
	        AND DATE(l.reg_date) &lt;= #{endDate}
	    </if>
	    ORDER BY l.reg_date DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>
    
    <select id="getTotalUserLogCount" parameterType="java.util.Map" resultType="int">
        SELECT COUNT(*) 
        FROM user_logs l LEFT OUTER JOIN users u ON u.user_id = l.user_id
        WHERE 1=1
	    <if test="email != null and email != ''">
	        AND u.email LIKE CONCAT('%', #{email}, '%')
	    </if>
	    <if test="status != null and status != ''">
	        AND l.login_status = #{status}
	    </if>
	    <if test="startDate != null">
	        AND DATE(l.reg_date) &gt;= #{startDate}
	    </if>
	    <if test="endDate != null">
	        AND DATE(l.reg_date) &lt;= #{endDate}
	    </if>
    </select>
    
    <select id="getCommonCodesList" resultType="com.foodychat.user.vo.CommonCodesVO">
        SELECT 	c.code_id,
        		c.code_name,
				IFNULL(u.USER_NAME,'') as reg_id,
				c.reg_date
		FROM	common_codes c LEFT OUTER JOIN users u ON u.user_id = c.reg_id
    </select>
    
    <select id="getCommonCodesDetailList" resultType="com.foodychat.user.vo.CommonCodesVO">
        SELECT 	c.code_id,
        		c.code_name,
        		d.detail_code,
        		d.detail_name,
				IFNULL(u.USER_NAME,'') as reg_id,
				d.reg_date
		FROM	common_codes c 	LEFT OUTER JOIN common_code_details d ON d.code_id = c.code_id
								LEFT OUTER JOIN users u ON u.user_id = d.reg_id
		WHERE	c.code_id = #{code_id}
    </select>
    
    <select id="codeExists" parameterType="String" resultType="int">
		SELECT	COUNT(*)
		FROM	common_codes
		WHERE	code_id = #{codeId}
	</select>
	
	<insert id="insertCode" parameterType="com.foodychat.user.vo.CommonCodesVO">
		INSERT common_codes(code_id, code_name, reg_id, reg_ip)
		VALUES(#{code_id}, #{code_name}, #{login_id}, #{login_ip})
	</insert>
	
	<update id="updateCode" parameterType="com.foodychat.user.vo.CommonCodesVO">
		UPDATE common_codes
        SET	code_name = #{code_name},
            upd_id = #{login_id},
            upd_ip = #{login_ip},
            upd_date = NOW()
        WHERE code_id = #{code_id}
	</update>
	
	<select id="countDetailCode" parameterType="com.foodychat.user.vo.CommonCodesVO" resultType="int">
		SELECT	COUNT(*)
		FROM	common_code_details
		WHERE	code_id = #{code_id}
			AND detail_code = #{detail_code}
	</select>
	
	<insert id="insertDetailCode" parameterType="com.foodychat.user.vo.CommonCodesVO">
		INSERT common_code_details(code_id, detail_code, detail_name, reg_id, reg_ip)
		VALUES(#{code_id}, #{detail_code}, #{detail_name}, #{login_id}, #{login_ip})
	</insert>
	
	<update id="updateDetailCode" parameterType="com.foodychat.user.vo.CommonCodesVO">
		UPDATE common_code_details
        SET	detail_name = #{detail_name},
            upd_id = #{login_id},
            upd_ip = #{login_ip},
            upd_date = NOW()
        WHERE code_id = #{code_id}
        	AND detail_code = #{detail_code}
	</update>
	
	<delete id="deleteDetailCodes" parameterType="String">
		DELETE FROM common_code_details
        WHERE code_id = #{codeId}
	</delete>
	
	<delete id="deleteCode" parameterType="String">
		DELETE FROM common_codes
        WHERE code_id = #{codeId}
	</delete>
	
	<delete id="deleteDetailCode" parameterType="java.util.Map">
		DELETE FROM common_code_details
        WHERE code_id = #{codeId}
        	AND detail_code = #{detailCode}
	</delete>
</mapper>
